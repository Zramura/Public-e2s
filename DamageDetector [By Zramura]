@name DamageDetector [By Zramura]
@inputs Butten
@outputs Damage Count
@persist Entity:entity
function getDamageType(Damage:damage){
    const TypeTable = table(
        _DMG_ACID = "ACID",
        _DMG_AIRBOAT = "AIRBOAT",
        _DMG_ALWAYSGIB = "ALWAYSGIB",
        _DMG_BLAST = "BLAST",
        _DMG_BLAST_SURFACE = "BLAST_SURFACE",
        _DMG_BUCKSHOT = "BUCKSHOT",
        _DMG_BURN = "BURN",
        _DMG_CLUB = "CLUB",
        _DMG_CRUSH = "CRUSH",
        _DMG_DIRECT = "DIRECT",
        _DMG_DISSOLVE = "DISSOLVE",
        _DMG_DROWN = "DROWN",
        _DMG_DROWNRECOVER = "DROWNRECOVER",
        _DMG_ENERGYBEAM = "ENERGYBEAM",
        _DMG_FALL = "FALL",
        _DMG_GENERIC = "GENERIC",
        _DMG_MISSILEDEFENSE = "MISSILEDEFENSE",
        _DMG_NERVEGAS = "NERVEGAS",
        _DMG_NEVERGIB = "NEVERGIB",
        _DMG_PARALYZE = "PARALYZE",
        _DMG_PHYSGUN = "PHYSGUN",
        _DMG_PLASMA = "PLASMA",
        _DMG_POISON = "POISON",
        _DMG_PREVENT_PHYSICS_FORCE = "PREVENT_PHYSICS_FORCE",
        _DMG_RADIATION = "RADIATION",
        _DMG_REMOVENORAGDOLL = "REMOVENORAGDOLL",
        _DMG_SHOCK = "SHOCK",
        _DMG_SLASH = "SLASH",
        _DMG_SLOWBURN = "SLOWBURN",
        _DMG_SNIPER = "SNIPER",
        _DMG_SONIC = "SONIC",
        _DMG_VEHICLE = "VEHICLE"
    )
    local TypeOutput = ""
    foreach(Key:number,_:string = TypeTable){
        if(Damage:isType(Key)){
            TypeOutput = TypeTable[Key,string]
        }
    }
    return TypeOutput
}
if(dupefinished()){reset()}
if(first()){
    Count = 0,Damage = 0
    Entity = entity():isWeldedTo()
}
event entityDamage(Victim:entity, DMG:damage) {
    if(Victim==Entity){
        Damage = round(DMG:getAmount(),2)
        Count += Damage
        print("Damage Type "+getDamageType(DMG)+" :: Amount = "+Damage:toString()+" :: total = "+Count:toString())
    }
}
if(Butten){Count = 0,Damage = 0}
